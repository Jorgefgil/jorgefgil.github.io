import boto3
import json
import time

s3_client = boto3.client('s3')
textract_client = boto3.client('textract')
dynamo_client = boto3.client('dynamodb')

DYNAMO_TABLE_NAME = 'LegalDocumentsMetadata'

def lambda_handler(event, context):
    try:
        # Obtenemos el nombre del bucket y el nombre del archivo desde el evento de S3
        bucket_name = event['Records'][0]['s3']['bucket']['name']
        file_name = event['Records'][0]['s3']['object']['key']

        # Llamamos a Textract para extraer el texto del documento
        response = textract_client.start_document_text_detection(
            DocumentLocation={'S3Object': {'Bucket': bucket_name, 'Name': file_name}}
        )

        # Obtenemos el jobId de la respuesta de Textract
        job_id = response['JobId']

        # Esperamos a que Textract termine el procesamiento
        print(f"Esperando a que Textract termine el análisis para {file_name}...")
        result = wait_for_textract_job(job_id)

        # Procesamos los resultados de Textract
        document_text = ''
        for item in result['Blocks']:
            if item['BlockType'] == 'LINE':
                document_text += item['Text'] + "\n"

        # Clasificamos el documento en base a palabras clave (puedes usar expresiones regulares)
        document_type = classify_document(document_text)

        # Guardamos los metadatos en DynamoDB
        dynamo_client.put_item(
            TableName=DYNAMO_TABLE_NAME,
            Item={
                'DocumentName': {'S': file_name},
                'DocumentType': {'S': document_type},
                'Content': {'S': document_text},
            }
        )

        print(f"Metadatos del documento {file_name} guardados en DynamoDB.")

    except Exception as e:
        print(f"Error al procesar el documento {file_name}: {str(e)}")
        raise e

def wait_for_textract_job(job_id):
    # Función para esperar hasta que el trabajo de Textract termine
    while True:
        response = textract_client.get_document_text_detection(JobId=job_id)
        status = response['JobStatus']
        if status in ['SUCCEEDED', 'FAILED']:
            return response
        time.sleep(5)

def classify_document(document_text):
    # Función simple para clasificar el documento basado en palabras clave
    if 'confidentiality agreement' in document_text.lower():
        return 'Acuerdo de Confidencialidad'
    elif 'contract' in document_text.lower():
        return 'Contrato'
    else:
        return 'Otro Documento Legal'
